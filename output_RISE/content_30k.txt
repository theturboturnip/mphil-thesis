1 Introduction

Since 2010, the Cambridge Computer Lab (in association with SRI) has been developing the CHERI¹ architecture extension, which improves the security of any given architecture by checking all memory accesses in hardware. The core impact of CHERI, on a hardware level, is that memory can no longer be accessed directly through raw addresses, but must pass through a capability[WMSN19]. Capabilities are unforgeable tokens that grant fine-grained access to ranges of memory. Instead of generating them from scratch, capabilities must be derived from another capability with greater permissions. For example, a capability giving read-write access to an array of structures can be used to create a sub-capability granting read-only access to a single element. This vastly reduces the scope of security violations through spatial errors (e.g. buffer overflows[SPWS13]), and creates interesting opportunities for software compartmentalization[WWNM15].

Industry leaders have recognized the value CHERI provides. Arm Inc have manufactured the Morello System-on-Chip, based on their Neoverse N1 CPU, which incorporates CHERI capabilities into the Armv8.2 ISA. While this represents a great step forward, there are still elements on the SoC that haven’t fully embraced CHERI (e.g. the GPU), and architecture extensions that haven’t been investigated in the context of CHERI. One such example is Arm’s Scalable Vector Extension (introduced in Armv8.2 but not included in Neoverse N1), which is designed to remain in use well into the future[SBBE17]. Supporting this and other scalable vector ISAs in CHERI is essential to CHERI’s long-term relevance.

In the context of modern computer architecture, vector processing is the practice of dividing a large hardware register into a vector of multiple elements and executing the same operation on each element in a single instruction². This data-level parallelism can drastically increase throughput, particularly for arithmetic-heavy programs. However, before computing arithmetic, the vectors must be populated with data.

1.1 Motivation

Modern vector implementations all provide vector load/store instructions to access a whole vector’s worth of memory. These range from simple contiguous accesses (where all elements are next to each other), to complex indexed accesses (where each element loads from a different location based on another vector). They can also have per-element semantics, e.g. “elements must be loaded in order, so if one element fails the preceding elements are still valid”[Xyz21 Section 7.7]. If CHERI CPUs want to benefit from vector processing’s increased performance and throughput, they must support those instructions at some level. But adding CHERI’s bounds-checking to the mix may affect these semantics, and could impact performance (e.g. checking each element’s access in turn may be slow).

Vector memory access performance is more critical than one may initially assume, because vectors are used for more than just computation. A prime example is memcpy: for x86_64, glibc includes multiple versions of the function³ taking advantage of vector platforms, then selects one to use at runtime⁴. These implementations are written in assembly and heavily optimized. If the memory accesses are hitting the cache, a few extra cycles of bounds-checking for each access could actually make a noticeable difference.

memcpy also raises the important question of how the vector model interacts with capabilities. In non-CHERI processors, memcpy will copy pointers around in memory without fuss. For a CHERI-enabled vector processor to support this, it would need to be able to load/store capabilities from vectors without violating any security guarantees. This may require more constraints - for example, each vector register likely needs to be at least as large as a single capability.

To explore this topic, we chose to focus on the RISC-V Vector extension[Xyz21] (shortened to RVV throughout). As of November 2021 this has been ratified by RISC-V International⁵, and will be RISC-V’s standard vector instruction set moving forward. This has two key benefits. Studying RVV will allow reference “CHERI-RVV” implementations to be built for the CHERI project’s open-source RISC-V cores⁶, which don’t currently support vector processing. Secondly, RVV is a scalable vector model, where the length of each vector is implementation-dependent. This has more potential roadblocks than a fixed-length vector model, and investigating them here will make life easier if Arm wish to integrate their Scalable Vector Extension with CHERI later down the road.

1.2 Hypotheses and Aims

The goal of this project is to investigate the impact of, and the roadblocks for, integrating a scalable vector architecture with CHERI’s memory protection system. In particular, we focus on integrating RVV with the CHERI-RISC-V ISA, with the aim of enabling a future CHERI-RVV implementation and informing the approach for a future CHERI Arm SVE implementation.

The investigation was carried out by designing and testing a CHERI-RVV emulator written in Rust, but that is only a single implementation. To show that CHERI-RVV is viable for a wide range of processors, we test nine hypotheses (see TODO).

2 Background

RISC-V is an open family of ISAs which defines “base integer ISAs” (e.g. all 64-bit RISC-V cores implement the RV64I base ISA) and extensions (e.g. the “M” extension for integer multiplication). A base instruction set combined with a set of extensions is known as a RISC-V ISA. Because RISC-V is open, anyone can design, manufacture, and sell chips implementing any RISC-V ISA.

Each RISC-V implementation has a set of constant parameters. The most common example is XLEN, the length of an integer register in bits, which is tied to the base integer ISA (e.g. 64-bit ISA implies XLEN=64). Other constant parameters include CLEN, the length of a capability in bits, defined by CHERI relative to XLEN; and VLEN and ELEN, which are used by RVV and entirely implementation-defined.

The extensions of most relevance to this project are the “V” vector extension (RVV, specified in [Xyz21]) and the CHERI extension (specified in [WNWR20]). RVV has recently been officially ratified, and is the de facto vector extension for RISC-V.

2.1 A brief history of vector processing

Many vector implementations (Intel SSE/AVX, Arm’s Advanced SIMD and Neon) use fixed-length vectors - e.g. 128-bit vectors which a program interprets as four 32-bit elements. As the industry’s desire for parallelism grew, new implementations had to be designed with longer vectors of more elements. For example, Intel SSE/SSE2 (both 128-bit) was succeeded by AVX (128 and 256-bit), then AVX2 (entirely 256-bit), then AVX-512 (512-bit). Programs built for one extension, and hence designed for a specific vector size, could not automatically take advantage of longer vectors.

Scalable vectors address this by not specifying the vector length, and instead calculating it on the fly. Instead of hardcoding “this loop iteration uses a single vector of four 32-bit elements”, the program has to ask “how many 32-bit elements will this iteration use?”. This gives hardware designers more freedom, letting them select a suitable hardware vector length for their power/timing targets, while guaranteeing consistent execution of programs on arbitrarily-sized vectors. RVV uses a scalable vector model.

2.2 The RVV vector model

RVV defines thirty-two vector registers, each of an implementation-defined constant width VLEN. These registers can be interpreted as vectors of elements. The program can configure the size of elements, and the implementation defines a maximum width ELEN.

RVV instructions operate on groups of vector registers. The implementation stores two variables, vstart and vl, which define the start and length of the “body” section within the vector. Instructions only operate on body elements, and some allow elements within the body to be masked out and ignored.

2.2.1 Exception handling

If synchronous exceptions (e.g. invalid memory access) or asynchronous interrupts are encountered while executing a vector instruction, RVV defines two ways to trap them. In both cases, the PC of the instruction is saved in a register “*epc”.

If the instruction should be resumed after handling the trap, e.g. in the case of demand paging, the implementation may use a “precise trap”. The implementation must complete all instructions up to “*epc”, and no instructions after that, and save the index of the offending vector element in “vstart”. Within the instruction, all vector elements before “vstart” must have committed their results, and all other elements must either 1) not have committed results, or 2) be idempotent e.g. repeatable without changing the outcome.

In other cases “imprecise traps” may be used, which allow instructions after “*epc” and vector elements after “vstart” to commit their results. “vstart” must still be recorded, however.

2.3 Previous RVV implementations

TODO is this necessary

2.4 CHERI

In CHERI, addresses/pointers are replaced with capabilities: unforgeable tokens that provide specific kinds of access to an address within a range of memory. The above statement is enough to understand what capabilities contain⁷:

-   Permission bits, to restrict access

-   The cursor, i.e. the address it currently points to

-   The bounds, i.e. the range of addresses this capability could point to

A great deal of work has gone into compressing capabilities down into a reasonable size (see [WJXF19]), and using the magic of floating-point all of this data has been reduced to just 2x the architectural register size. For example, on 64-bit RISC-V a standard capability is 128-bits long. The rest of this dissertation assumes capabilities are 128-bits long for simplicity.

A CHERI implementation has to enforce three security properties about its capabilities[WNWR20 Section 1.2.1]:

-   Provenance - Capabilities must always be derived from valid manipulations of other capabilities.

-   Integrity - Corrupted capabilities cannot be dereferenced.

-   Monotonicity - Capabilities cannot increase their rights.

Integrity is enforced by tagging registers and memory. Every 128-bit register and aligned 128-bit region of memory has an associated tag bit, which denotes if its data encodes a valid capability⁸. If any non-capability data is written to any part of the region the tag bit is zeroed out. Instructions that perform memory accesses can only do so if the provided capability has a valid tag bit. As above, significant work has gone into the implementation to reduce the DRAM overhead of this method (see [JWKM17]).

Provenance and Monotonicity are enforced by all instructions that manipulate capabilities. If an implementation detects a violation of either property, it will zero out the tag bit and rely on Integrity enforcement to ensure it is not dereferenced. Some CHERI-enabled architectures, such as CHERI-RISC-V, also raise a synchronous exception when this occurs.

2.4.1 CHERI-RISC-V ISA

The Cambridge Computer Lab’s TR-951 report[WNWR20] describes the latest version of the CHERI architecture (CHERI ISAv8) and proposes applications to MIPS, x86-64, and RISC-V. CHERI-RISC-V is a mostly straightforward set of additions to basic RISC-V ISAs. It adds thirty-two general-purpose capability registers, thirty-two Special Capability Registers (SCRs), and many new instructions.

The new general-purpose capability registers are each of size CLEN = 2 * XLEN plus a tag bit. These registers store compressed capabilities. While there is always a logical distinction between the pre-existing integer registers x0-x31 and the capability registers cx0-cx31, the architecture may store them in a Split or Merged register file. A Split register file stores the integer registers separately from capability registers, so programs can manipulate them independently. A Merged register file stores thirty-two registers of length CLEN, using the full width for the capability registers, and aliases the integer registers to the bottom XLEN bits. Under a merged register file, writing to an integer register makes the capability counterpart invalid, so programs have to be more careful with register usage.

Many of the new SCRs are intended to support the privileged ISA extensions for e.g. hypervisors or operating systems. The emulator doesn’t use these, so their SCRs are not listed here, but there are two highly relevant SCRs for all modes: the Program Counter Capability and the Default Data Capability.

The PCC replaces the program counter and adds more metadata, ensuring instruction fetches have the same security properties as normal loads and stores. The DDC is used to sandbox integer addressing modes. CHERI-RISC-V includes new instructions which use integer addressing, and allows legacy (i.e. integer addressed) code to function on CHERI systems without recompiling for CHERI-RISC-V. These instructions all use integer addresses relative to the DDC, and the DDC controls the permissions those instructions have.

2.4.2 Instruction changes

TODO simplify, include in Capability and Integer?

2.4.3 Capability and Integer encoding mode

CHERI-RISC-V specifies two encoding modes, selected using a flag in the PCC flags field. Capability mode modifies the behaviour of pre-existing instructions to take address operands as capabilities. This makes the basic load/store instruction behaviour exactly equivalent to newly introduced counterparts: e.g. L[BWHD][U] == L[BWHD][U].CAP. The DDC may still be used in this mode via the new instructions e.g. S[BWHD].DDC.

Integer mode seeks to emulate a standard CHERI-less RISC-V architecture as much as possible. All pre-existing RISC-V memory access instructions take address operands as integers, which are dereferenced relative to the DDC⁹. This makes the basic load/store instruction behaviour exactly equivalent to newly introduced counterparts: e.g. L[BWHD][U] == L[BWHD][U].DDC. The new instructions may still be used to dereference and inspect capability registers, but all other instructions access registers in an integer context i.e. ignoring the upper bits and tag from merged register files.

2.4.4 Pure-capability and Hybrid compilation modes

TODO note this somewhere in software area

3 Hardware emulation investigation

In order to experiment with integrating CHERI and RVV, we implemented a RISC-V emulator in the Rust programming language named riscv-v-lite. The emulator supports the Multiply, CSR, Vector, and CHERI extensions, and was also used as the base for capabilities-in-vectors research ([chap:capinvec]). This chapter explores the development of the emulator, the implementation of CHERI support (including supplementary libraries), the addition of vector support, and the conclusions drawn about CHERI-RVV.

3.1 Developing the emulator

TODO condense

Each architecture is simulated in the same way. A Processor struct holds the register file and memory, and a separate ProcessorModules struct holds the ISA modules the architecture can use. Each ISA module uses a “connector” struct to manipulate data in the Processor. For example, the RV64 Integer ISA’s connector contains the current PC, a virtual reference to a register file, and a virtual reference to memory. This allows different Processor structs (e.g. a normal RV64 and a CHERI-enabled RV64) to reuse the same ISA modules despite using different register file implementations.

Each Processor implements a single stage pipeline. Instructions are fetched, decoded with a common decoder function¹⁰, and executed. The processor asks each ISA module in turn if it wants to handle the instruction, and uses the first module to say yes. If the ISA module returns a new PC value it is immediately applied, otherwise it is automatically incremented. This structure easily represents basic RISC-V architectures, and can scale up to support many different new modules.

3.1.1 Emulating CHERI

Manipulating CHERI capabilities securely and correctly is a must for any CHERI-enabled emulator. Capability encoding logic is not trivial by any means, so the cheri-compressed-cap C library was re-used rather than implementing it from scratch. Rust has generally decent interoperability with C, but some of the particulars of this library caused issues.

3.1.1.1 rust-cheri-compressed-cap

cheri-compressed-cap provides two versions of the library by default, for 64-bit and 128-bit capabilities, which are generated from a common source through extensive use of the preprocessor. Each variant defines a set of preprocessor macros (e.g. the widths of various fields) before including two common header files cheri_compressed_cap_macros.h and cheri_compressed_cap_common.h. The latter then defines every relevant structure or function based on those preprocessor macros. For example, a function compute_base_top is generated twice, once as cc64_decompress_mem returning cc64_cap_t and another time as cc128_decompress_mem returning cc128_cap_t. Elegantly capturing both sets was the main challenge for the Rust wrapper.

One of Rust’s core language elements is the Trait - a set of functions and “associated types” that can be implemented for any type. This gives a simple way to define a consistent interface: define a trait CompressedCapability with all of the functions from cheri_compressed_cap_common.h, and implement it for two empty structures Cc64 and Cc128. In the future, this would allow the Morello versions of capabilities to be added easily. A struct CcxCap<T> is also defined which uses specific types for addresses and lengths pulled from a CompressedCapability. For example, the 64-bit capability structure holds a 32-bit address, and the 128-bit capability a 64-bit address.

128-bit capabilities can cover a 64-bit address range, and thus can have a length of 2⁶⁴. Storing this length requires 65-bits, so all math in cheri_compressed_cap_common.h uses 128-bit length values. C doesn’t have any standardized 128-bit types, but GCC and LLVM provide so-called “extension types” which are used instead. Although the x86-64 ABI does specify how 128-bit values should be stored and passed as arguments[LMGH18], these rules do not seem consistently applied¹¹. This causes great pain to anyone who needs to pass them across a language boundary.

Rust explicitly warns against passing 128-bit values across language boundaries, and the Clang User’s Manual even states that passing i128 by value is incompatible with the Microsoft x64 calling convention¹². This could be resolved through careful examination: for example, on LLVM 128-bit values are passed to functions in two 64-bit registers¹³, which could be replicated in Rust by passing two 64-bit values. For convenience, we instead rely on the Rust and Clang compilers using compatible LLVM versions and having identical 128-bit semantics.

The CHERI-RISC-V documentation contains formal specifications of all the new CHERI instructions, expressed in the Sail architecture definition language¹⁴. These definitions are used in the CHERI-RISC-V formal model¹⁵, and require a few helper functions (see [WNWR20 Chapter 8.2]). To make it easier to port the formal definitions directly into the emulator the rust-cheri-compressed-cap library also defines those helper functions.

The above work is available online¹⁶, and includes documentation for all C functions (which is not documented in the main repository). That documentation is also available online¹⁷ and partially reproduced in [appx:docs:rustcherilib].

3.1.1.2 Integrating into the emulator

Integrating capabilities into the emulator was relatively simple thanks to the modular emulator structure. A capability-addressed memory type was created, which wraps a simple integer-addressed memory in logic which performs the relevant capability checks. For integer encoding mode, a further integer-addressed memory type was created where integer addresses are bundled with the DDC before passing through to a capability-addressed memory (see [fig:emulatormemory]). Similarly, a merged capability register file type was created that exposed integer-mode and capability-mode accesses. This layered approach meant code for basic RV64I operations did not need to be modified to handle CHERI at all - simply passing the integer-mode memory and register file would perform all relevant checks.

Integrating capability instructions was also simple. Two new ISA modules were created: XCheri64 for the new CHERI instructions, and Rv64imCapabilityMode to override the behaviour of legacy instructions in capability-encoding-mode (see [fig:module_algorithm]). The actual Processor structure was left mostly unchanged. Integer addresses were changed to capabilities throughout, memory and register file types were changed as described above, and the PCC/DDC were added.

handle with XCheri64 handle with Rv64imCapabilityMode wrap memory with DDC-relative handle with Rv64im handle with vector unit wrap memory in DDC-relative handle with vector unit

The capability model presented by the C/Rust library has one flaw. Each CcxCap instance stores capability metadata (e.g. the uncompressed bounds) as well as the compressed encoding. This makes it potentially error-prone to represent untagged integer data with CcxCap, as the compressed and uncompressed data may not be kept in sync and cause inconsistencies later down the line. CcxCap also provides a simple interface to set the tag bit, without checking whether that is valid. The emulator introduced the SafeTaggedCap to resolve this: a sum type which represents either a CcxCap with the tag bit set, or raw data with the tag bit unset. This adds type safety, as the Rust compiler forces every usage of SafeTaggedCap to consider both options, preventing raw data from being interpreted as a capability by accident and enforcing Provenance.

The final hurdle was the capability relocations outlined in [chap:bg:subsec:cherirelocs]. Because we’re emulating a bare-metal platform, there is no operating system to do this step for us. A bare-metal C function has been written to perform the relocations¹⁸, which could be compiled into the emulated program. We decided it would be quicker to implement this in the simulator, but in the future we should be able to perform the relocations entirely in bare-metal C.

3.1.2 Emulating vectors

Vector instructions are executed by a Vector ISA module, which stores all registers and other state. VLEN is hardcoded as 128-bits, chosen because it’s the largest integer primitive provided by Rust that’s large enough to hold a capability. ELEN is also 128-bits, which isn’t supported by the specification, but is required for capabilities-in-vectors ([chap:capinvec]). Scaling VLEN and ELEN any higher would require the creation and integration of new types that were more than 128-bits long.

To support both CHERI and non-CHERI execution pointers are separated into an address and a provenance¹⁹. The vector unit retrieves an address + provenance pair from the base register, generates a stream of addresses to access, then rejoins each address with the provenance to access memory. When using capabilities, provenance is defined in terms of the base register e.g. “the provenance is provided by capability register X”, or defined by the DDC in integer mode²⁰. On non-CHERI platforms the vector unit doesn’t check provenance.

Arithmetic and configuration instructions are generally simple to implement, so aren’t covered here. The emulator splits vector memory accesses into three phases: decoding, checking, and execution. A separate decoding stage may technically not be necessary in hardware (especially the parts checking for errors and reserved instruction encodings, which a hardware platform could simply assume won’t happen), but it allows each memory access instruction to be classified into one of the five archetypes outlined in [chap:bg:sec:rvvmemory]. It is then easy to define the checking and execution phases separately for each archetype, as the hardware would need to do.

3.1.2.1 Fast-path checking phase

TODO the emulator describes full-access checking, but we removed that part. TODO greatly cut this down

The initial motivation for this project was investigating the impact of capability checks on performance. Rather than check each element’s access individually, we determine a set of “fast-path” checks which count as checks for multiple elements at once. In the emulator, this is done by computing the “tight bounds” for each access, i.e. the exact range of bytes that will be accessed, and doing a single capability check with that bounds. [chap:hardware:sec:fastpath] describes methods for calculating the “tight bounds” for each access type, and ways that architectural complexity can be traded off to calculate wider bounds.

If the tight bounds don’t pass the capability check, the emulator raises an imprecise trap and stops immediately. In the case of fault-only-first loads, where synchronous exceptions (e.g. capability checks) are explicitly handled, the access continues regardless and elements are checked individually. This is also the expected behaviour if a capability check for wider bounds fails. The emulator deviates from the spec in that vstart is not set when the tight bounds check fails, as it does not know exactly which element would have triggered the exception. As noted in [chap:hardware:sec:fastpath], a fully compliant machine must check each access to find vstart in these cases.

3.1.2.2 Execution phase

If the fast-path check deems it appropriate, the emulator continues execution of the instruction in two phases. First, the mapping of vector elements to accessed memory addresses is found. The code for this step is independent of the access direction, and an effective description of how each type of access works. It can be found in [appx:code:vector_mem_access]. The previously computed tight bounds are sanity-checked against these accesses, and the accesses are actually performed.

3.1.2.3 Integer vs. Capability encoding mode

CHERI-RISC-V defines two execution modes that the program can switch between. In Integer mode “address operands to existing RISC-V load and store opcodes contain integer addresses” which are implicitly dereferenced relative to the default data capability, and in Capability mode those opcodes are modified to use capability operands.

Integer mode was included in the interests of maintaining compatibility with legacy code that hasn’t been adapted to capabilities. As similar vector code may also exist, CHERI-RVV treats vector memory access instructions as “existing RISC-V load and store opcodes” and requires that they respect integer/capability mode.

We do not define new mode-agnostic instructions, which means vector programs cannot mix capability and integer addressing without changing encoding modes. This may make incremental adoption more difficult, and in the future we should examine existing vanilla RVV programs to determine if it’s worth adding those instructions.

3.2 Fast-path calculations

A fast-path check can be performed over various sets of elements. The emulator chooses to perform a single fast-path check for each vector access, calculating the tight bounds before starting the actual access, but in hardware this may introduce prohibitive latency. This section describes the general principles surrounding fast-paths for CHERI-RVV, notes the areas where whole-access fast-paths are difficult to calculate, and describes possible approaches for hardware.

3.2.1 Possible fast-path outcomes

In some cases, a failed address range check may not mean the access fails. The obvious case is fault-only-first loads, where capability exceptions may be handled without triggering a trap. Implementations may also choose to calculate wider bounds than accessed for the sake of simplicity, or even forego a fast-path check altogether. Thus, a fast-path check can have four outcomes depending on the circumstances.

A Success means no per-access capability checks are required. Likely-Failure and Unchecked results mean each access must be checked, to see if any of them actually raise an exception. Unfortunately, accesses still need to be checked under Failure, because both precise and imprecise traps need to report the offending element in vstart²¹.

Because all archetypes may have Failure or Likely-Failure outcomes, hardware must provide a fallback slow-path for each archetype which checks/performs each access in turn. In theory, a CHERI-RVV specification could relax the vstart requirement for imprecise traps, and state that all capability exceptions trigger imprecise traps. In this case, only archetypes that produce Likely-Failure outcomes need the slow-path. However, it is likely that for complexity reasons all masked accesses will use wide ranges, thus producing Likely-Failure outcomes and requiring slow-paths for all archetypes anyway. Because the Likely-Failure and Failure cases require the slow-path anyway, computing the fast-path can only be worthwhile if Success is the common case.

0.5

  Success          All accesses will succeed
  ---------------- ---------------------------
  Failure          At least one access will
                   raise an exception
  Likely-Failure   At least one access may
  or Unchecked     raise an exception

3.2.2 m-element known-range fast-paths

A hardware implementation of a vector unit may be able to issue m requests within a set range in parallel. For example, elements in the same cache line may be accessible all at once. In these cases, checking elements individually would either require m parallel bounds checks, m checks’ worth of latency, or something in-between. In this subsection we consider a fast-path check for m elements.

Capability checks can be split into two steps: address-agnostic (e.g. permissions checks, bounds decoding) 