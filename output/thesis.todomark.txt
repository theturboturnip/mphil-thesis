TODOs
1
thesis.tex- My acknowledgements ...
2
1_10Introduction/content.tex- nine
3
1_20Background/sub30_rvv_model.tex- examples
4
1_20Background/sub35_rvv_memory.tex- Make thinner
5
1_20Background/sub50_cheri.tex- add diagram from TR-941?
6
1_20Background/sub50_cheri.tex- diagram for split/merged register file?
7
1_20Background/sub50_cheri.tex- is there rationale for that documented somewhere?
8
1_25EmulationInvestigation/sub10_emu_cheri.tex- diagram
9
1_25EmulationInvestigation/sub10_emu_cheri.tex- show the program flow for using modules
10
1_25EmulationInvestigation/sub20_emu_vec.tex- diagram of floating point ld/st vs. vector ld/st
11
1_25EmulationInvestigation/sub20_emu_vec.tex- Decision tree for operation decoding
12
1_25EmulationInvestigation/sub30_fast_path.tex- Captions for equations
13
1_30Software/content.tex- Figure page showing generated ASM for increment loop - see godbolt links MD
14
1_30Software/content.tex- example based on \url {https://github.com/riscv-non-isa/rvv-intrinsic-doc/blob/master/examples/rvv_memcpy.c}
15
1_30Software/content.tex- Change the code font
16
1_30Software/content.tex- appendix based on \url {https://godbolt.org/z/zoWh9jq3o}
17
1_30Software/content.tex- Appendix on how this was done?
18
1_30Software/content.tex- Example
19
1_30Software/content.tex- example
20
1_30Software/content.tex- example of error message?
21
1_30Software/content.tex- Appendix which covers what I know so far about this problem?
22
1_30Software/content.tex- segue into saving registers on stack doesn't make sense - doesn't explain why someone would want to
23
1_30Software/content.tex- Example https://godbolt.org/z/KPTW7rcvY
24
1_30Software/content.tex- Note: Arm Language C extensions https://developer.arm.com/documentation/100987/0000/ defines the concept of a sizeless type, which may be stored on the stack. Would be a good base for RVV?
25
1_30Software/content.tex- LLVM IR pass is investigated in TR-949 \$3.8.2, worth noting somewhere
26
1_30Software/sub50_hyp.tex- violate? exceed?
27
1_40CapInVec/content.tex- This paragraph is bad. Plan: split the above paragraph into two, incorporate impact on Provenance and required memory accesses into second half.
28
2_1Appendix/fastpath_fullcheck.tex- Justify appendix existence
29
2_1Appendix/fastpath_fullcheck.tex- reference Success, Indeterminate, Failure cases
30
2_1Appendix/fastpath_fullcheck.tex- fast-path could be split up? i.e. for LMUL = 8, could execute a fast-path for each register in the group rather than all 8 at once
31
2_1Appendix/fastpath_fullcheck.tex- iterating over elements may still be more energy-efficient than doing individual capability checks?
32
2_1Appendix/fastpath_fullcheck.tex- Note that the equation is a simplification of strided for \code {stride = nf * eew}
33
2_1Appendix/cherirvv.tex- CHERI-RVV changes RVV instructions to use capabilities as address references in all places, no other behaviour changes
34
2_1Appendix/cherirvv.tex- CHERI-RVV treats capability out-of-bounds for an element as a synchronous exception, permission checks for a vector access are treated as a synchronous exception on element 0.
35
2_1Appendix/cherirvv.tex- The above means fault-only-first will silently swallow capability permission errors if element 0 is masked out.
36
2_1Appendix/cherirvv.tex- CHERI-RVV doesn't change CHERI behaviour
37
2_1Appendix/cherirvv.tex- Adds unit load/store 128, element width 128
38
2_1Appendix/artifacts.tex- artifacts appendix needs fixing
